/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Controlador.ControladorActividades;
import Controlador.ControladorClases;
import Modelo.Clase;
import Modelo.ClasesTableModel;
import Modelo.Empleado;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;

import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;

/**
 *
 * @author Noelia
 */
public class FormGestionarClases extends javax.swing.JFrame {

    ArrayList<Empleado> listaProfesores;
    ArrayList<Clase> listaClases;
    int nuevo;
    int codClaseSeleccionada;

    public FormGestionarClases() {
        initComponents();
        listaProfesores = null;
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        habilitar(false);
        nuevo = 0;
        codClaseSeleccionada = -1;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        Date date = new Date();
        SpinnerDateModel sm =
        new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        timeInicio = new javax.swing.JSpinner(sm);
        Date date2 = new Date();
        SpinnerDateModel sm2 =
        new SpinnerDateModel(date2, null, null, Calendar.HOUR_OF_DAY);
        timeFin = new javax.swing.JSpinner(sm2);
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtCupo = new javax.swing.JTextField();
        cboTipoActividad = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        cboProfesores = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblClase = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gestionar Clases");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        JSpinner.DateEditor de = new JSpinner.DateEditor(timeInicio, "HH:mm:ss");
        timeInicio.setEditor(de);

        JSpinner.DateEditor de2 = new JSpinner.DateEditor(timeFin, "HH:mm:ss");
        timeFin.setEditor(de2);

        jLabel1.setText("Hora de inicio :");

        jLabel2.setText("Hora de fin :");

        jLabel6.setText("Cupo :");

        jLabel7.setText("Actividad :");

        jLabel8.setText("Profesor :");

        tblClase.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Profesor", "Actividad", "Cupo", "Hora Inicio", "Hora Fin"
            }
        ));
        tblClase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblClaseMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblClase);

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/nuevo2.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/editar3.png"))); // NOI18N
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/eliminar2.png"))); // NOI18N
        btnEliminar.setText("Elimnar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/guardar2.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setEnabled(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Remover.png"))); // NOI18N
        btnCancelar.setText("Cancelar");
        btnCancelar.setEnabled(false);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnNuevo)
                .addGap(18, 18, 18)
                .addComponent(btnEditar)
                .addGap(18, 18, 18)
                .addComponent(btnEliminar)
                .addGap(18, 18, 18)
                .addComponent(btnGuardar)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar)
                .addGap(18, 18, 18)
                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnNuevo)
                            .addComponent(btnEditar)
                            .addComponent(btnEliminar)
                            .addComponent(btnGuardar)
                            .addComponent(btnCancelar))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 716, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboTipoActividad, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cboProfesores, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(1, 1, 1)
                                    .addComponent(txtCupo, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(1, 1, 1))
                                .addComponent(timeInicio, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(timeFin, javax.swing.GroupLayout.Alignment.TRAILING)))
                        .addGap(441, 441, 441)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cboProfesores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboTipoActividad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCupo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timeInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timeFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        habilitar(true);
        nuevo = 1;
        borrar();
        tblClase.clearSelection();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        if (codClaseSeleccionada > -1 && tblClase.getSelectedRow() > -1) {
            nuevo = 2;
            habilitar(true);
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar la clase que desea editar", "Editar Clase", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (codClaseSeleccionada > -1 && tblClase.getSelectedRow() > -1) {
            ControladorClases cc = new ControladorClases();
            cc.eliminarClase(codClaseSeleccionada);
            actualizarTabla();
            codClaseSeleccionada = -1;
            tblClase.clearSelection();
            borrar();
            JOptionPane.showMessageDialog(this, "Se elimino la clase correctamente!", "Eliminar Clase", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar la clase que desea eliminar", "Eliminar Clase", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        if (validacion()) {
            Clase clase = new Clase();
            clase.setIdACtividad(cboTipoActividad.getSelectedIndex() + 1);
            clase.setCupo(Integer.parseInt(txtCupo.getText()));

            //formateo el date para que solo obtenga la hora 
            DateFormat fechaHora = new SimpleDateFormat("HH:mm:ss");
            String hIni = fechaHora.format(timeInicio.getValue());
            String hFin = fechaHora.format(timeFin.getValue());

            clase.setHoraInicio(hIni);
            clase.setHoraFin(hFin);

            /* Obtiene el profesor seleccionado en el combo box
             y lo relaciona con el arrayList que contiene los profesores para obtener el id
             */
            clase.setIdEmpleado(listaProfesores.get(cboProfesores.getSelectedIndex()).getCodEmpleado());
            ControladorClases cc = new ControladorClases();
            if (nuevo == 1) {
                cc.agregarNuevaClase(clase);
                JOptionPane.showMessageDialog(this, "Se agrego la nueva clase con exito!", "Nueva Clase", JOptionPane.INFORMATION_MESSAGE);
            } else if (nuevo == 2) {
                clase.setIdClase(codClaseSeleccionada);
                cc.editarClase(clase);
                JOptionPane.showMessageDialog(this, "Se agregaron los cambios con exito!", "Editar Clase", JOptionPane.INFORMATION_MESSAGE);
            }
            actualizarTabla();
            nuevo = 0;
            habilitar(false);
            codClaseSeleccionada = -1;
            borrar();
            tblClase.clearSelection();
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        habilitar(false);
        nuevo = 0;
        borrar();
        codClaseSeleccionada = -1;
        tblClase.clearSelection();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        cargarActividades();
        obtenerProfesores();
        actualizarTabla();
        codClaseSeleccionada = -1;
    }//GEN-LAST:event_formWindowOpened

    private void tblClaseMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblClaseMousePressed
        if (tblClase.isEnabled()) {
            int i = tblClase.getSelectedRow();
            if (i > -1 && i < tblClase.getRowCount()) {
                Clase c = listaClases.get(i);

                SimpleDateFormat formatter = new SimpleDateFormat("HH:mm:ss");
                String hIni = c.getHoraInicio();
                String hFin = c.getHoraFin();
                try {
                    Date date = formatter.parse(hIni);
                    timeInicio.setValue(date);
                    date = formatter.parse(hFin);
                    timeFin.setValue(date);

                } catch (ParseException e) {
                    e.printStackTrace();
                }
                txtCupo.setText(String.valueOf(c.getCupo()));
                cboTipoActividad.setSelectedIndex(c.getIdACtividad() - 1);

                for (int j = 0; j < listaProfesores.size(); j++) {
                    if (listaProfesores.get(j).getCodEmpleado() == c.getIdEmpleado()) {
                        cboProfesores.setSelectedIndex(j);
                    }
                }
                codClaseSeleccionada = c.getIdClase();
            }
        } else {
            JOptionPane.showMessageDialog(this, "No puede seleccionar elementos mientras esta editando", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_tblClaseMousePressed

    private void borrar() {
        txtCupo.setText("");
        cboProfesores.setSelectedIndex(0);
        cboTipoActividad.setSelectedIndex(0);
        SimpleDateFormat formatter = new SimpleDateFormat("HH:mm:ss");
        String hIni = "15:00:00";
        String hFin = "16:00:00";
        try {
            Date date = formatter.parse(hIni);
            timeInicio.setValue(date);
            date = formatter.parse(hFin);
            timeFin.setValue(date);

        } catch (ParseException e) {
            e.printStackTrace();
        }

    }

    private void cargarActividades() {
        ControladorActividades ca = new ControladorActividades();

        ArrayList<String> tipos = ca.tipoActividades();
        for (String tipo : tipos) {
            cboTipoActividad.addItem(tipo);
        }
    }

    private void actualizarTabla() {
        ControladorClases cc = new ControladorClases();
        listaClases = cc.obtenerClases();

        ClasesTableModel ctm = new ClasesTableModel(listaClases);
        tblClase.setModel(ctm);

    }

    private void habilitar(boolean x) {
        txtCupo.setEnabled(x);
        timeFin.setEnabled(x);
        timeInicio.setEnabled(x);
        cboProfesores.setEnabled(x);
        cboTipoActividad.setEnabled(x);
        btnCancelar.setEnabled(x);
        btnGuardar.setEnabled(x);
        btnNuevo.setEnabled(!x);
        btnEditar.setEnabled(!x);
        btnEliminar.setEnabled(!x);
        tblClase.setEnabled(!x);

    }

    private boolean validacion() {
        try {
            if (cboProfesores.getSelectedIndex() < 0) {
                throw new Exception("Al parecer no hay profesores en la lista!");
            }
            if (cboTipoActividad.getSelectedIndex() < 0) {
                throw new Exception("Al parecer no hay actividades en la lista!");
            }
            if (txtCupo.getText().isEmpty()) {
                throw new Exception("El cupo no puede estar vacio ");
            }
            if (!isNumeric(txtCupo.getText())) {
                throw new Exception("El cupo debe ser de tipo numerico");
            }

            try {
                DateFormat fechaHora = new SimpleDateFormat("HH:mm:ss");
                String hIni = fechaHora.format(timeInicio.getValue());
                String hFin = fechaHora.format(timeFin.getValue());
            } catch (Exception e) {
                throw new Exception("La hora no es valida");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        return true;
    }

    private static boolean isNumeric(String cadena) {
        try {
            Integer.parseInt(cadena);
            return true;
        } catch (NumberFormatException nfe) {
            return false;
        }
    }

    private void obtenerProfesores() {
        ControladorClases cc = new ControladorClases();
        listaProfesores = cc.obtenerProfesores();

        for (Empleado listaProfesore : listaProfesores) {
            cboProfesores.addItem(listaProfesore.getApellido() + " " + listaProfesore.getNombre());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormGestionarClases.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormGestionarClases.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormGestionarClases.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormGestionarClases.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormGestionarClases().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox cboProfesores;
    private javax.swing.JComboBox cboTipoActividad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblClase;
    private javax.swing.JSpinner timeFin;
    private javax.swing.JSpinner timeInicio;
    private javax.swing.JTextField txtCupo;
    // End of variables declaration//GEN-END:variables
}
